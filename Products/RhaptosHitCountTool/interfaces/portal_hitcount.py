# Copyright (c) 2004 The Connexions Project, All Rights Reserved
# Written by Brent Hendricks

""" File system import interface"""

from Interface import Attribute
try:
    from Interface import Interface
except ImportError:
    # for Zope versions before 2.6.0
    from Interface import HitCount as Interface

class portal_hitcount(Interface):
    """Defines an interface for a tool that converts content to a PDF file"""

    id = Attribute('id','Must be set to "portal_hitcount"')

    def resetHitCounts():
        """
        Clear the list of registered objects and set the start date to the current date and time
        """

    def registerObject(objectId, published_date):
        """
        Register an object with the HitCount tool.

        objectId must a unique identifer for the object.
        published_date is a DateTime object specifying the date of
        publication for the object.  This is used for calculating
        average hits per day
        """

    def listRegisteredObjects():
        """
        Return a list of identifiers for registered objects
        """

    def incrementCounts(mapping, begin_date=None, end_date=None):
        """
        Increment the hit counter for content objects.

        mapping must be a mapping from objectId to an integer number
        of hit counts.  Each objectId must have been previously
        registered with registerObject, otherwise raises ValueError

        begin_date and end_date specify the range of
        time covered by this increment.  If end_date is None, the
        current timestamp will be used.

        """

    def getHitCounts(recent=False):
        """
        Return hit counts for all registered objects.  If recent is True,
        return the count for the previous increment, otherwise returns
        counts for all time

        The return value will be a list of (objectId, count) tuples in
        descending hit count order.
        """
        
    def getHitCountForObject(objectId, recent=False):
        """
        Return the hit counts for the specified object ID.  If recent
        is True, return the count for the previous increment,
        otherwise returns counts for all time
        """

    def getDailyAverages(recent=False):
        """
        Return the average daily hit count for all registered objects.
        If recent=True, return the average for the previous increment,
        otherwise returns averages for all time.
        """
    
    def getDailyAverageForObject(objectId, recent=False):
        """
        Return the average daily hit count for the specified object
        from its date of publication to the present (for the date
        range statistics are available).  If recent=True, return the
        average for the previous increment, otherwise returns averge
        for all time.
        """
    
    def setStartDate(date):
        """
        Set the initial date from which hits are counted
        """

    def getStartDate():
        """
        Get the initial date from which hits are counted
        """

    def getIncrementDateRange():
        """
        Return the date range covered by the most recent increment as
        a tuple (begin_date, end_date)
        """

    def dumpHitCounts():
        """Returns a transferable string object of all the hit count data. For use with restore method"""

    def restoreHitCounts(dumpstr):
        """Destructively overrides the hit count data with that provided in the dump string, which was previously generated by dumpHitCounts"""
